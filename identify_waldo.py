# -*- coding: utf-8 -*-
"""Identify Waldo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqODXJ6a2nfYhpFmyLxfIwo7v41r2N5o

# Identify Image

### Import necessary dependencies
"""

from matplotlib import pyplot as plt
import numpy as np
import cv2
import os

from keras_retinanet import models
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image

"""### Define PATH to model"""

print("Loading Paths...         ", end="")
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
model_path = "D:\\repos\\finding-waldo\\weights.h5"     # Trained weights file
DATA_DIR = "D:\\repos\\finding-waldo\\train"
TEST_DIR = "D:\\repos\\finding-waldo\\test"
print("Done")

print("Loading Model...         ", end="")
model = models.load_model(model_path, backbone_name='resnet50')
print("Done")

"""### ID the Image"""

VIEW = 1
COUNT = 0

# % cd "D:\\repos\\finding-waldo\\train"

print("Looking for Specified Image...         ", end="")
for img in os.listdir(DATA_DIR):

    COUNT = COUNT + 1
    if COUNT == VIEW:
        print(img, end="")
        print("     Done")

        print("Reading Image...         ", end='')
        image = read_image_bgr(os.path.join(DATA_DIR, img))
        draw = image.copy()
        draw = cv2.cvtColor(draw, cv2.COLOR_BGR2RGB)

        image = preprocess_image(image)
        image, scale = resize_image(image, min_side=1800, max_side=3000)
        print("Done")

        print("Predicting...")
        boxes, scores, labels = model.predict_on_batch(np.expand_dims(image, axis=0))
        print("Prediction Done")

        boxes /= scale

        fig = plt.figure(figsize=(draw.shape[1]/100, draw.shape[0]/100))

        img_mask = 255 * np.ones_like(draw)

        print("\n----------DEBUG INFO----------")
        obj = 1
        for box, score, label in zip(boxes[0], scores[0], labels[0]):
            if score < 0.5:
                break

            print("Object #"+str(obj))
            obj = obj + 1
            b = box.astype(int)

            print("Label       : " + str(label))
            print("Confidence  : " + str(score.astype(float)))
            print("Co-Ords     : " + str(b) + "\n")

            img_mask[b[1]:b[3], b[0]:b[2]] = draw[b[1]:b[3], b[0]:b[2]]
        print("----------DEBUG INFO----------\n")

        print("Displaying output...         ", end="")
        plt.imshow(draw)
        plt.imshow(img_mask, alpha=0.5)
        # plt.axis('off')
        plt.show()
        plt.close()
        print("Done")
